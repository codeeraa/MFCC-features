#ifndef MEL_FILTERBANK_H
#define MEL_FILTERBANK_H

#include <vector>
#include <cmath>
#include <complex>

// convert frequency to mel
double melScale(double freq) {
    return 2595.0 * std::log10(1.0 + freq / 700.0);
}

// convert mel scale to frequency
double melScaleInverse(double melFreq) {
    return 700.0 * (std::pow(10.0, melFreq / 2595.0) - 1.0);
}

// compute mel filterbank
std::vector<std::vector<double>> computeMelFilterBank(int numFilters, int frameSize, double sampleRate, double fmin, double fmax) {
    int numBins = frameSize / 2 + 1;
    std::vector<std::vector<double>> melFilterBank(numFilters, std::vector<double>(numBins, 0.0));
    
    double melMin = melScale(fmin);
    double melMax = melScale(fmax);
    double melStep = (melMax - melMin) / (numFilters + 1);
    
    std::vector<double> melCenters(numFilters + 2);
    for (int i = 0; i < numFilters + 2; ++i) {
        melCenters[i] = melScaleInverse(melMin + i * melStep);
    }
    
    for (int i = 1; i <= numFilters; ++i) {
        int leftBin = std::floor((frameSize + 1) * melCenters[i - 1] / sampleRate);
        int centerBin = std::floor((frameSize + 1) * melCenters[i] / sampleRate);
        int rightBin = std::floor((frameSize + 1) * melCenters[i + 1] / sampleRate);
        
        // ensure that bin indices are within the valid range
        leftBin = std::max(0, leftBin);
        centerBin = std::min(centerBin, numBins - 1);
        rightBin = std::min(rightBin, numBins - 1);
        
        for (int j = leftBin; j < centerBin; ++j) {
            melFilterBank[i - 1][j] = (j - leftBin) / double(centerBin - leftBin);
        }
        for (int j = centerBin; j < rightBin; ++j) {
            melFilterBank[i - 1][j] = (rightBin - j) / double(rightBin - centerBin);
        }
    }
    
    return melFilterBank;
}

// apply mel filter to fft frames
std::vector<std::vector<double>> applyMelFilterBank(const std::vector<std::vector<std::complex<double>>>& fftFrames, const std::vector<std::vector<double>>& melFilterBank) {
    int numFilters = melFilterBank.size();
    int numFrames = fftFrames.size();
    int frameSize = fftFrames[0].size();
    
    std::vector<std::vector<double>> melSpectrogram(numFrames, std::vector<double>(numFilters, 0.0));
    for (int i = 0; i < numFrames; ++i) {
        for (int j = 0; j < numFilters; ++j) {
            double sum = 0.0;
            for (int k = 0; k < frameSize / 2 + 1; ++k) {
                sum += std::norm(fftFrames[i][k]) * melFilterBank[j][k];
            }
            melSpectrogram[i][j] = sum;
        }
    }
    
    return melSpectrogram;
}

#endif // MEL_FILTERBANK_H
